/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 12 "go2c.go"

// Example of interfacing between Go and C programs.

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// add adds two integers.
//
extern int add(int x, int y);

// square returns the square of an integer.
//
extern GoInt square(GoInt x);

// printBits prints an integer in binary format.
//
extern void printBits(int x);

// negate returns the logical negation of a boolean.
//
extern GoUint8 negate(GoUint8 b);

// toBits returns a string with the binary representation of an integer
// Returned value must be freed with free() from C or with C.free() from Go.
//
extern char* toBits(int x);

// conCat concatenates 2 strings.
// Returned value must be freed with free() from C or with C.free() from Go.
//
extern char* conCat(char* a, char* b);

// join concatenates a slice of strings.
// Returned value must be freed with free() from C or with C.free() from Go.
//
extern char* join(GoSlice s);

// toUpper converts a string to upper case
// Returned value must be freed with free() from C or with C.free() from Go.
//
extern char* toUpper(GoString a);

/* Return type for toString */
struct toString_return {
	char* r0;
	char* r1;
};

// toString takes an integer and returns its sign and absolute value as strings.
// Multiple return values are represented in C as stuctures.
// Returned values must be freed with free() from C or with C.free() from Go.
//
extern struct toString_return toString(GoInt x);

// toUpper2 converts a string to upper case
// Returning Go pointers or types that contain a Go pointer comes with some restrictions.
// All Go pointers passed to C must point to pinned Go memory, see https://pkg.go.dev/cmd/cgo#hdr-Passing_pointers
//
extern GoString toUpper2(GoString a);

// ToUpper3 converts a string to upper case
// This is not safe to use in C, it requires special handling, see https://pkg.go.dev/runtime/cgo#Handle
//
extern void* toUpper3(GoString a);

#ifdef __cplusplus
}
#endif
